/*********************************************************************
 This is an example for our nRF52 based Bluefruit LE modules

 Pick one up today in the adafruit shop!

 Adafruit invests time and resources providing this open source code,
 please support Adafruit and open-source hardware by purchasing
 products from Adafruit!

 MIT license, check LICENSE for more information
 All text above, and the splash screen below must be included in
 any redistribution
*********************************************************************/
#include <Arduino.h>
#include <SD.h>
#include <bluefruit.h>
#include <Wire.h>
#include "SparkFunMPL3115A2.h"
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BNO055.h>
#include <utility/imumaths.h>

/*
 * ToDo:
 * 1. Add sensing section
 * 2. Add logic
 * 
 * Notes:
 * 1. At fastest rate of data collection, 2min = 400kb ~ 3h launch window = 180 min = 36MB. 
 * 2. Current use at room temp is 25mA. 
 * 3. Stress testing with 105mAh Lipo battery yields 1h 40min (116 min), expected was 4h (240 min) ~ 40%.  
 * 
 */

// Defines
#define OLED_RESET 4
#define XPOS 0
#define YPOS 1
#define DELTAY 2
#define UPDATERATE 10
#define BNO055_SAMPLERATE_DELAY_MS 1
#define LOOP2_TIME 8
#define LOOP3_TIME 200
#define IMPACT_G 20
#define MIN_H 50 //minimum height above ground, 50ft

#define VBAT_PIN          (A7)
#define VBAT_MV_PER_LSB   (0.87890625F)   // 3.0V ADC range and 12-bit ADC resolution = 3000mV/4096
#define VBAT_DIVIDER      (0.71275837F)   // 2M + 0.806M voltage divider on VBAT = (2M / (0.806M + 2M))
#define VBAT_DIVIDER_COMP (1.403F)        // Compensation factor for the VBAT divider


#define PIN_X A0
#define PIN_Y A1
#define PIN_Z A2
#define GREEN_LED 15
#define RED_LED 16
#define CS_PIN 11
#define TOGGLE_PIN 30

#define VOLTAGE_M 1587 // measured
#define ACC_CALIBRATION 3600/4096*200/VOLTAGE_M // 12 bits, 3.6V reference

// BLE Service
BLEDis  bledis;
BLEUart bleuart;
BLEBas  blebas;

// Software Timer for blinking RED LED
SoftwareTimer blinkTimer;

MPL3115A2 baro;
Adafruit_SSD1306 display(OLED_RESET);
Adafruit_BNO055 bno = Adafruit_BNO055(55);
File currentFile;

// Globals
int heartbeat=0;
int prev_heartbeat = 0;
volatile int G_altm;
int G_ground_altm;
int G_tempC,G_batt;
int G_x,G_y,G_z;
volatile int G_ex,G_ey,G_ez;
float G_High_x, G_High_y, G_High_z;
int red_state = 0;
int green_state = 0;
int in_error = 0;

int launched = 0;
int landed = 0;
int highest_point = 0;

boolean recording = false;

int baro_on, bno_on; // variables to track status
unsigned long currMillis,prevMillis,startMillis;
unsigned long flushTime; // file flush
unsigned long loop2Millis = millis(),loop3Millis=millis();
volatile long testMillis,diffMillis;

// Functions
void statusUpdate(void);

void setup()
{
  Wire.begin();
  Serial.begin(115200);
  Serial.println("Bluefruit52 BLEUART Example");
  Serial.println("---------------------------\n");

  attachInterrupt(TOGGLE_PIN, toggleHandler, FALLING);


  

  // Sensor init //
  /*
  if (! baro.begin()) {
    Serial.println("Couldnt find sensor");
    baro_on = 0;
  }
  else {
    baro_on = 1;
  }
  */
  baroInit();
  Serial.println("Baro init complete");
  
  if(!bno.begin())
  {
    /* There was a problem detecting the BNO055 ... check your connections */
    Serial.println("ERROR: BNO055 init!");
    bno_on = 0;
    in_error = 1;
  }
  else {
    Serial.println("BNO055 init complete.");
    bno_on = 1;
    bno.setExtCrystalUse(true);
  }
  if (!SD.begin(11)) {
    Serial.println("ERROR: SD card init!");
    in_error = 1;
  }
  else {
    Serial.println("SD card init complete.");
  }
  analogReadResolution(12); // setup resolution for sensor
  acc_init(); // init ADXL377
  Serial.println("High G init complete.");
  led_init(); // setup LEDs as outputs
  Serial.println("Led init complete.");
  //screenInit();
  // Initialize software timers
  blinkTimer.begin(5000, blink_timer_callback);
  blinkTimer.start();
  Serial.println("Init complete.");
  init_complete();
  Serial.println("Starting .");
  
  
  flushTime = millis();
  startMillis = millis(); // start counting after init complete
  


  //Scheduler.startLoop(loop2);
  //Scheduler.startLoop(slow_update_loop);

}


void loop()
{
  // Forward data from HW Serial to BLEUART
  //attachInterrupt(digitalPinToInterrupt(TOGGLE_PIN), toggleRecording, FALLING);
  currMillis = millis(); // start timer.
  //checkButton();
  
  if((millis()-loop2Millis)>=LOOP2_TIME){
    diffMillis = millis()-testMillis; // just to check how long it takes to return to this point
    testMillis = millis();
    sensors_event_t event;
    bno.getEvent(&event);
    G_x = (int)event.orientation.x;
    G_y = (int)event.orientation.y; // we only care about the y axis.
    G_z = (int)event.orientation.z;
    //G_altm  = (int)baro.getAltitude();
    G_altm = (int)baro.readAltitudeFt()-G_ground_altm;
    read_acc();
    recordData();
    loop2Millis=millis();// reset 
    //Serial.println(diffMillis);
  }

  if((millis()-loop3Millis)>=LOOP3_TIME){
    //screenUpdate();
    //ble_update();
    //Serial.println("Toggle here");
    if(recording){digitalToggle(GREEN_LED);}
    if(in_error){digitalToggle(RED_LED);}
    G_batt=readVbat(); // reads battery life
    bleSystemHealth(); // repor
    
    loop3Millis = millis();
  }
  
  flushData();
  //read_acc();


  
  while (Serial.available())
  {
    // Delay to wait for enough input, since we have a limited transmission buffer
    delay(1);
    uint8_t buf[64];
    int count = Serial.readBytes(buf, sizeof(buf));
    bleuart.write( buf, count );
  }
  // Forward from BLEUART to HW Serial
  while ( bleuart.available() )
  {
    uint8_t ch;
    ch = (uint8_t) bleuart.read();
    Serial.write(ch);
  }

  // Request CPU to enter low-power mode until an event/interrupt occurs
  waitForEvent();
}

void bleInit(){
    // Setup the BLE LED to be enabled on CONNECT
  // Note: This is actually the default behaviour, but provided
  // here in case you want to control this LED manually via PIN 19
  Bluefruit.autoConnLed(true);

  Bluefruit.begin();
  // Set max power. Accepted values are: -40, -30, -20, -16, -12, -8, -4, 0, 4
  Bluefruit.setTxPower(4);
  Bluefruit.setName("Bluefruit52");
  //Bluefruit.setName(getMcuUniqueID()); // useful testing with multiple central connections
  Bluefruit.setConnectCallback(connect_callback);
  Bluefruit.setDisconnectCallback(disconnect_callback);

  // Configure and Start Device Information Service
  bledis.setManufacturer("Adafruit Industries");
  bledis.setModel("Bluefruit Feather52");
  bledis.begin();

  // Configure and Start BLE Uart Service
  bleuart.begin();

  // Start BLE Battery Service
  blebas.begin();
  blebas.write(100);

  // Set up and start advertising
  startAdv();

  Serial.println("Please use Adafruit's Bluefruit LE app to connect in UART mode");
  Serial.println("Once connected, enter character(s) that you wish to send");
}

void startAdv(void)
{
  // Advertising packet
  Bluefruit.Advertising.addFlags(BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE);
  Bluefruit.Advertising.addTxPower();

  // Include bleuart 128-bit uuid
  Bluefruit.Advertising.addService(bleuart);

  // Secondary Scan Response packet (optional)
  // Since there is no room for 'Name' in Advertising packet
  Bluefruit.ScanResponse.addName();
  
  /* Start Advertising
   * - Enable auto advertising if disconnected
   * - Interval:  fast mode = 20 ms, slow mode = 152.5 ms
   * - Timeout for fast mode is 30 seconds
   * - Start(timeout) with timeout = 0 will advertise forever (until connected)
   * 
   * For recommended advertising interval
   * https://developer.apple.com/library/content/qa/qa1931/_index.html   
   */
  Bluefruit.Advertising.restartOnDisconnect(true);
  Bluefruit.Advertising.setInterval(32, 244);    // in unit of 0.625 ms
  Bluefruit.Advertising.setFastTimeout(30);      // number of seconds in fast mode
  Bluefruit.Advertising.start(0);                // 0 = Don't stop advertising after n seconds  
}


void connect_callback(uint16_t conn_handle)
{
  char central_name[32] = { 0 };
  Bluefruit.Gap.getPeerName(conn_handle, central_name, sizeof(central_name));

  Serial.print("Connected to ");
  Serial.println(central_name);
}

void disconnect_callback(uint16_t conn_handle, uint8_t reason)
{
  (void) conn_handle;
  (void) reason;

  Serial.println();
  Serial.println("Disconnected");
}
/*
 * Init complete
 * Send out init complete
 */
 void init_complete(){
  char buf[64]; // buffer
  int n; // count
  for(int i=0;i<3;i++){
    digitalWrite(RED_LED,HIGH);
    digitalWrite(GREEN_LED,HIGH);
    n=sprintf(buf,"Init complete %d\n",i);// Heartbeat,alt,temp
    bleuart.write(buf, n); // write to UART
    Serial.println(buf);
    delay(500);
    digitalWrite(RED_LED,LOW);
    digitalWrite(GREEN_LED,LOW);
    delay(500);
  }
 }


/*
 * LED init
 */
void led_init(){
  pinMode(RED_LED,OUTPUT);
  pinMode(GREEN_LED,OUTPUT);
}

/*
 * Toggles Red led
 */
void toggle_red(){
  if (red_state == 1){
    red_state = 0;
  }
  else {
    red_state = 1;
  }
  digitalWrite(RED_LED,red_state);
}

/*
 * System health, reported over BLE
 */

void bleSystemHealth(){
  char buf[64]; // buffer
  int n; // count
  n=sprintf(buf,"B: %d E: %d, R: %d\n",G_batt,in_error,recording);//Battery level, Error status, Recording
  bleuart.write(buf, n); // write to UART
 }
 
/*
 * This updates the status of the rocket and reports it to UART
 */

void statusUpdate() {
  //diffMillis = currMillis - prevMillis;
  //prevMillis = currMillis;
  //heartbeat = heartbeat+1;
  if(bno_on) {
    //sensors_event_t event;
    //bno.getEvent(&event);
    //G_x = (int)event.orientation.x;
    //G_y = (int)event.orientation.y; // we only care about the y axis.
    //G_z = (int)event.orientation.z;
    // Euler Angles - it is the same as event.orientation
    //imu::Vector<3> euler = bno.getVector(Adafruit_BNO055::VECTOR_EULER);
    //G_ex = (int)euler.x();
    //G_ey = (int)euler.y();
    //G_ez = (int)euler.z();
    //delay(BNO055_SAMPLERATE_DELAY_MS);
  }
  if(baro_on){
    //float pascals = baro.getPressure();
    //Serial.print(pascals/3377); Serial.println(" Inches (Hg)");
    //int altm = (int)baro.getAltitude();
    //G_altm = altm;
    //Serial.print(altm); Serial.println(" meters");
    //int tempC = (int)baro.getTemperature();
    //G_tempC = tempC;
    //Serial.print(tempC); Serial.println("*C");
  }
}

/*
 * Baro init
 */

void baroInit(){
  baro.begin();
  baro.setModeAltimeter();
  baro.setOversampleRate(0);
  baro.enableEventFlags();
  G_ground_altm = (int)baro.readAltitudeFt();
}
 

/*
 * Init the screen
 */

void screenInit() {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.display();
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE,BLACK); // make the background black so we just write over the previous characters
}

/*
 * Update the BLE module
 * Note that we are as terse as possible when reporting data.
 */

void bleUpdate() {
  char buf[64]; // buffer
  int n; // count
  n=sprintf(buf,"H: %d A: %d, T: %d\n",heartbeat,G_altm,G_tempC);// Heartbeat,alt,temp
  bleuart.write( buf, n); // write to UART
  n=sprintf(buf,"X: %d Y: %d Z: %d\n",G_x,G_y,G_z); // x,y,z orientation
  bleuart.write( buf, n); // write to UART
}

void screenUpdate() {
  //display.clearDisplay();
  display.setCursor(0,0);
  display.print("Update(ms): ");display.print(diffMillis);display.println("    ");
  display.setCursor(0,10);
  if (baro_on){
    display.print("Temp:");display.print(G_tempC);display.print(" | Alt:");display.println(G_altm);
  }
  else {
    display.println("Baro Offline            "); // offline, lets attempt to turn it on.
  }
  display.setCursor(0,20);
  if (bno_on){
    display.print("X:");display.print(G_x);display.print(" | Y:");display.print(G_y);display.print(" | Z:");display.print(G_z);display.println("  ");
    //display.setCursor(0,30);
    //display.print("EX:");display.print(G_ex);display.print(" | EY:");display.print(G_ey);display.print(" | EZ:");display.print(G_ez);display.println("  ");
  }
  else {
    display.print("Orientation Offline             ");
  }
  display.display();
}

/*
 * ADXL377
 */
 void acc_init(){
  pinMode(PIN_X,INPUT);
  pinMode(PIN_Y,INPUT);
  pinMode(PIN_Z,INPUT);
 }

 void read_acc(){
  int X_val = analogRead(PIN_X); // max is 3700+ ~ 3.3V
  int Y_val = analogRead(PIN_Y);
  int Z_val = analogRead(PIN_Z);
  // 3600mV/4096 * Counts = voltage
  // (voltage-1650)*(200) = acc (gs)
  // (3600/4096*1841-1650)*200/1650
  G_High_x = ((float)X_val*ACC_CALIBRATION)-200.0; 
  G_High_y = ((float)Y_val*ACC_CALIBRATION)-200.0;
  G_High_z = ((float)Z_val*ACC_CALIBRATION)-200.0;
  //Serial.print("X: ");Serial.print(X_f);Serial.print(" Y: ");Serial.print(Y_f);Serial.print(" Z: ");Serial.println(Z_f);
 }



/*
 * Flush file
 */
 void flushData(){
  //Serial.print("Flush: ");Serial.print(flushTime);Serial.print(" now: ");Serial.println(millis());
  if ((millis() - flushTime) > (60000 * 2)) {
    if (recording){
      Serial.println("Flush!");
      currentFile.flush();
    }
    flushTime = millis();
  }
 }


/*
 * Write to currently open file
 */
void recordData(){
  if(recording){
    currentFile.print(millis()-startMillis); // get time
    currentFile.print(',');
    currentFile.print(G_altm);
    currentFile.print(',');
    currentFile.print(G_x);
    currentFile.print(',');
    currentFile.print(G_y);
    currentFile.print(',');
    currentFile.print(G_z);
    currentFile.print(',');
    currentFile.print(G_High_x);
    currentFile.print(',');
    currentFile.print(G_High_y);
    currentFile.print(',');
    currentFile.println(G_High_z);
  }
}

/*
 * creates a file if one doesn't exist
 */

void startRecording(){
  int i = 0;
  String fileName;
  fileName = "data_";
  fileName += i;
  fileName += ".txt";
  while (SD.exists(fileName)) {
    i++;
    fileName = "data_";
    fileName += i;
    fileName += ".txt";
  }
  currentFile = SD.open(fileName, FILE_WRITE);
  flushTime = millis(); // capture time for flush..
  Serial.print("SD Card File is:");Serial.println(fileName); 
  // Generate Header
  currentFile.print("Time");
  currentFile.print(',');
  currentFile.print("Alt");
  currentFile.print(',');
  currentFile.print("Euler X");
  currentFile.print(',');
  currentFile.print("Euler Y");
  currentFile.print(',');
  currentFile.print("Euler Z");
  currentFile.print(',');
  currentFile.print("High X");
  currentFile.print(',');
  currentFile.print("High Y");
  currentFile.print(',');
  currentFile.println("High Z");
  
}

/* 
 *  Might want to add an LED for blinkie
 */
void toggleHandler() {
   static unsigned long last_interrupt_time = 0;
   unsigned long interrupt_time = millis();
   // If interrupts come faster than 400ms, assume it's a bounce and ignore
   if (interrupt_time - last_interrupt_time > 400){
      if (recording==1){
      // stop recording
      currentFile.close();
      recording = 0;
      digitalWrite(RED_LED,LOW);
      Serial.println("Stopping recording!");
    }
    else {
      startRecording();
      recording = 1;
      Serial.println("Starting recording!");
    }
   }
   last_interrupt_time = interrupt_time;
}

void where_am_i(){
  if(launched){
    if (highest_point<G_altm){
      highest_point = G_altm;
    }
    else{ // Rocket coming down
      if(impact_detected() && G_altm<(MIN_H)){ // impact detected close to ground
        landed = 1;
      }
    }
  }
  else {
    if (impact_detected() && G_altm>(MIN_H)){
      launched = 1;
    }
  }
}

int impact_detected(){
  if(G_High_x>IMPACT_G or G_High_y>IMPACT_G or G_High_z>IMPACT_G){
    return 1;
  }
  else if (G_High_x<-IMPACT_G or G_High_y<-IMPACT_G or G_High_z<-IMPACT_G){
    return 1;
  }
  else{
    return 0;
  }
}

/*
 * Battery
 */

int readVbat(void) {
  int raw;

  // Set the analog reference to 3.0V (default = 3.6V)
  //analogReference(AR_INTERNAL_3_0);

  // Set the resolution to 12-bit (0..4095)
  //analogReadResolution(12); // Can be 8, 10, 12 or 14

  // Let the ADC settle
  //delay(1);

  // Get the raw 12-bit, 0..3600mV ADC value
  raw = analogRead(VBAT_PIN);
  uint8_t vbat_per = mvToPercent(raw * VBAT_MV_PER_LSB);
  float vbat_mv = (float)raw * VBAT_MV_PER_LSB * VBAT_DIVIDER_COMP;
  Serial.print("ADC = ");
  Serial.print(raw * VBAT_MV_PER_LSB);
  Serial.print(" mV (");
  Serial.print(raw);
  Serial.print(") ");
  Serial.print("LIPO = ");
  Serial.print(vbat_mv);
  Serial.print(" mV (");
  Serial.print(vbat_per);
  Serial.println("%)");
  return vbat_per;
}

uint8_t mvToPercent(float mvolts) {
    uint8_t battery_level;

    if (mvolts >= 3000)
    {
        battery_level = 100;
    }
    else if (mvolts > 2900)
    {
        battery_level = 100 - ((3000 - mvolts) * 58) / 100;
    }
    else if (mvolts > 2740)
    {
        battery_level = 42 - ((2900 - mvolts) * 24) / 160;
    }
    else if (mvolts > 2440)
    {
        battery_level = 18 - ((2740 - mvolts) * 12) / 300;
    }
    else if (mvolts > 2100)
    {
        battery_level = 6 - ((2440 - mvolts) * 6) / 340;
    }
    else
    {
        battery_level = 0;
    }

    return battery_level;
}



/**
 * Software Timer callback is invoked via a built-in FreeRTOS thread with
 * minimal stack size. Therefore it should be as simple as possible. If
 * a periodically heavy task is needed, please use Scheduler.startLoop() to
 * create a dedicated task for it.
 * 
 * More information http://www.freertos.org/RTOS-software-timer.html
 */
void blink_timer_callback(TimerHandle_t xTimerID)
{
  (void) xTimerID;
  digitalToggle(LED_RED);
  //Serial.print("Hello! ");
  //screenUpdate();
  //flushData();
  //Serial.print(G_ex);Serial.print(',');Serial.print(G_ey);Serial.print(',');Serial.println(G_ez);
}




/**
 * RTOS Idle callback is automatically invoked by FreeRTOS
 * when there are no active threads. E.g when loop() calls delay() and
 * there is no bluetooth or hw event. This is the ideal place to handle
 * background data.
 * 
 * NOTE: FreeRTOS is configured as tickless idle mode. After this callback
 * is executed, if there is time, freeRTOS kernel will go into low power mode.
 * Therefore waitForEvent() should not be called in this callback.
 * http://www.freertos.org/low-power-tickless-rtos.html
 * 
 * WARNING: This function MUST NOT call any blocking FreeRTOS API 
 * such as delay(), xSemaphoreTake() etc ... for more information
 * http://www.freertos.org/a00016.html
 */
void rtos_idle_callback(void)
{
  // Don't call any other FreeRTOS blocking API()
  // Perform background task(s) here
}

